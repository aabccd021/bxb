/* eslint-disable max-len */
/* eslint-disable prettier/prettier */
import type { Test} from '../src/test';
import { tests as masmottTests } from '../src/test';
export const tests: Record<string, Test> = {
  "functions > onAuthUserCreated > onAuthUserCreated trigger can upsert doc": masmottTests.functions.onAuthUserCreated.test2,
  "functions > onAuthUserCreated > onAuthUserCreated trigger should not be called if not triggered": masmottTests.functions.onAuthUserCreated.test3,
  "functions > onAuthUserCreated > document should not be created if trigger not deployed": masmottTests.functions.onAuthUserCreated.test4,
  "functions > onObjectCreated > onObjectCreated trigger params contains object id with client.storage.uploadDataUrlAwaitFunctions": masmottTests.functions.onObjectCreated.test1,
  "functions > onObjectCreated > uploadDataUrl should wait all functions to be finised with client.storage.uploadDataUrlAwaitFunctions": masmottTests.functions.onObjectCreated.test14,
  "functions > onObjectCreated > onObjectCreated trigger params contains object id": masmottTests.functions.onObjectCreated.test2,
  "functions > onObjectCreated > uploadDataUrl should not wait functions to be finished": masmottTests.functions.onObjectCreated.test24,
  "functions > onObjectCreated > onObjectCreated trigger should not be called if not triggered": masmottTests.functions.onObjectCreated.test3,
  "functions > onObjectCreated > document should not be created if trigger not deployed": masmottTests.functions.onObjectCreated.test4,
  "stackTests > client > auth > createUserAndSignInWithEmailAndPassword > changes auth state to signed": masmottTests.stackTests.client.auth.createUserAndSignInWithEmailAndPassword.test0001,
  "stackTests > client > auth > getAuthState > returns signed out as default auth state": masmottTests.stackTests.client.auth.getAuthState.test0001,
  "stackTests > client > auth > getAuthState > returns singed in state after client.auth.createUserAndSignInWithEmailAndPassword": masmottTests.stackTests.client.auth.getAuthState.test0002,
  "stackTests > client > auth > getAuthState > returns authUser uid same as the one returned from client.auth.createUserAndSignInWithEmailAndPassword": masmottTests.stackTests.client.auth.getAuthState.test0003,
  "stackTests > client > auth > getAuthState > returns singed out state after client.auth.createUserAndSignInWithEmailAndPassword then client.auth.signOut": masmottTests.stackTests.client.auth.getAuthState.test0004,
  "stackTests > client > auth > onAuthStateChanged > returns signed out as default auth state": masmottTests.stackTests.client.auth.onAuthStateChanged.test0001,
  "stackTests > client > auth > onAuthStateChanged > returns singed in state after client.auth.createUserAndSignInWithEmailAndPassword": masmottTests.stackTests.client.auth.onAuthStateChanged.test0002,
  "stackTests > client > auth > onAuthStateChanged > returns singed out state after client.auth.createUserAndSignInWithEmailAndPassword then client.auth.signOut then subscribe": masmottTests.stackTests.client.auth.onAuthStateChanged.test0003,
  "stackTests > client > auth > onAuthStateChanged > returns singed out state after subscribe and client.auth.createUserAndSignInWithEmailAndPassword then client.auth.signOut": masmottTests.stackTests.client.auth.onAuthStateChanged.test0004,
  "stackTests > client > auth > onAuthStateChanged > returns singed out state after client.auth.createUserAndSignInWithEmailAndPassword then subscribe then client.auth.signOut": masmottTests.stackTests.client.auth.onAuthStateChanged.test0005,
  "stackTests > client > auth > onAuthStateChanged > does not call onAuthStateChanged callback after unsubscribed": masmottTests.stackTests.client.auth.onAuthStateChanged.test0006,
  "stackTests > client > db > getDoc > can get doc created with client.db.upsertDoc": masmottTests.stackTests.client.db.getDoc.test0001,
  "stackTests > client > db > getDoc > always returns the latest doc state": masmottTests.stackTests.client.db.getDoc.test0002,
  "stackTests > client > db > getDoc > does not returns doc made by forbidden create doc request done with client.db.upsertDoc": masmottTests.stackTests.client.db.getDoc.test0003,
  "stackTests > client > db > getDoc > does not returns doc made by forbidden update doc request done with client.db.upsertDoc": masmottTests.stackTests.client.db.getDoc.test0004,
  "stackTests > client > db > getDoc > returns ForbiddedError if forbidden": masmottTests.stackTests.client.db.getDoc.test0005,
  "stackTests > client > db > getDoc > returns ForbiddedError if forbidden, even if the doc absent": masmottTests.stackTests.client.db.getDoc.test0006,
  "stackTests > client > db > getDoc > can get doc created by server.db.upsertDoc": masmottTests.stackTests.client.db.getDoc.test0007,
  "stackTests > client > db > getDoc > can get doc updated by server.db.upsertDoc": masmottTests.stackTests.client.db.getDoc.test0008,
  "stackTests > client > db > getDocWhen > can return doc after a doc is created with client.db.upsertDoc": masmottTests.stackTests.client.db.getDocWhen.test0001,
  "stackTests > client > db > getDocWhen > can return doc after a doc is updated with client.db.upsertDoc": masmottTests.stackTests.client.db.getDocWhen.test0002,
  "stackTests > client > db > getDocWhen > returns ForbiddedError if forbidden": masmottTests.stackTests.client.db.getDocWhen.test0003,
  "stackTests > client > db > getDocWhen > client.db.getDoc returns Forbidden if forbidden and document absent": masmottTests.stackTests.client.db.getDocWhen.test0004,
  "stackTests > client > db > getDocWhen > can return doc after a doc is created with server.db.upsertDoc": masmottTests.stackTests.client.db.getDocWhen.test0005,
  "stackTests > client > db > getDocWhen > can return a doc is created with async client.db.upsertDoc": masmottTests.stackTests.client.db.getDocWhen.test0006,
  "stackTests > client > db > getDocWhen > can return a doc updated with async client.db.upsertDoc": masmottTests.stackTests.client.db.getDocWhen.test0007,
  "stackTests > client > db > getDocWhen > can return a doc is created with async server.db.upsertDoc": masmottTests.stackTests.client.db.getDocWhen.test0008,
  "stackTests > client > db > getDocWhen > can return a doc updated with async server.db.upsertDoc": masmottTests.stackTests.client.db.getDocWhen.test0009,
  "stackTests > client > db > onSnapshot > can return a doc updated with client.db.upsertDoc": masmottTests.stackTests.client.db.onSnapshot.test0001,
  "stackTests > client > db > onSnapshot > returns ForbiddedError if forbidden": masmottTests.stackTests.client.db.onSnapshot.test0002,
  "stackTests > client > db > onSnapshot > returns Forbidden if forbidden and document absent": masmottTests.stackTests.client.db.onSnapshot.test0003,
  "stackTests > client > db > onSnapshot > can return a doc created with server.db.upsertDoc": masmottTests.stackTests.client.db.onSnapshot.test0004,
  "stackTests > client > db > onSnapshot > can return a doc updated with server.db.upsertDoc": masmottTests.stackTests.client.db.onSnapshot.test0005,
  "stackTests > client > db > onSnapshot > can return a doc is created with async client.db.upsertDoc": masmottTests.stackTests.client.db.onSnapshot.test0006,
  "stackTests > client > db > onSnapshot > can return a doc updated with async client.db.upsertDoc": masmottTests.stackTests.client.db.onSnapshot.test0007,
  "stackTests > client > db > onSnapshot > can return a doc is created with async server.db.upsertDoc": masmottTests.stackTests.client.db.onSnapshot.test0008,
  "stackTests > client > db > onSnapshot > can return a doc updated with async server.db.upsertDoc": masmottTests.stackTests.client.db.onSnapshot.test0009,
  "stackTests > client > db > onSnapshot > can return a doc is created with client.db.upsertDoc": masmottTests.stackTests.client.db.onSnapshot.test0010,
  "stackTests > client > db > upsertDoc > returns Forbidden when creating doc if create rule is not specified": masmottTests.stackTests.client.db.upsertDoc.test0001,
  "stackTests > client > db > upsertDoc > returns Forbidden when updating doc if update rule is not specified": masmottTests.stackTests.client.db.upsertDoc.test0002,
  "stackTests > client > db > upsertDoc > can create doc": masmottTests.stackTests.client.db.upsertDoc.test0003,
  "stackTests > client > db > upsertDoc > returns Forbidden when creating doc if string given when int field required": masmottTests.stackTests.client.db.upsertDoc.test0004,
  "stackTests > client > db > upsertDoc > returns Forbidden when creating doc if int given when string field required": masmottTests.stackTests.client.db.upsertDoc.test0005,
  "stackTests > client > db > upsertDoc > returns Forbidden when creating doc if schema not specified": masmottTests.stackTests.client.db.upsertDoc.test0006,
  "stackTests > client > db > upsertDoc > can create doc if owner field value is owner's auth uid": masmottTests.stackTests.client.db.upsertDoc.test0007,
  "stackTests > client > db > upsertDoc > returns ForbidenError if owner field value is not owner's auth uid, even if signed in": masmottTests.stackTests.client.db.upsertDoc.test0008,
  "stackTests > client > db > upsertDoc > returns Forbidden if not signed in": masmottTests.stackTests.client.db.upsertDoc.test0009,
  "stackTests > client > db > upsertDoc > returns Forbidden if not signed in, swap comparation": masmottTests.stackTests.client.db.upsertDoc.test0010,
  "stackTests > client > storage > getDownloadUrl > can get download url of base64 uploaded with client.storage.getDownloadUrl": masmottTests.stackTests.client.storage.getDownloadUrl.test0001,
  "stackTests > client > storage > getDownloadUrl > can get download url of plain text uploaded with client.storage.getDownloadUrl": masmottTests.stackTests.client.storage.getDownloadUrl.test0002,
  "stackTests > client > storage > getDownloadUrl > returns Forbidden if not allowed": masmottTests.stackTests.client.storage.getDownloadUrl.test0003,
  "stackTests > client > storage > getDownloadUrl > returns Forbidden if not allowed even if the object is absent": masmottTests.stackTests.client.storage.getDownloadUrl.test0004,
  "stackTests > client > storage > getDownloadUrl > can get download url of base64 uploaded with async client.storage.getDownloadUrl": masmottTests.stackTests.client.storage.getDownloadUrl.test0005,
  "stackTests > client > storage > getDownloadUrl > can get download url of plain text uploaded with async client.storage.getDownloadUrl": masmottTests.stackTests.client.storage.getDownloadUrl.test0006,
  "stackTests > client > storage > uploadDataUrl > can upload base64 data url": masmottTests.stackTests.client.storage.uploadDataUrl.test0001,
  "stackTests > client > storage > uploadDataUrl > can plain text data url": masmottTests.stackTests.client.storage.uploadDataUrl.test0002,
  "stackTests > client > storage > uploadDataUrl > returns InvalidDataUrlFormat when invalid data url is uploaded": masmottTests.stackTests.client.storage.uploadDataUrl.test0003,
  "stackTests > client > storage > uploadDataUrl > returns Forbidden when create security rule not specified": masmottTests.stackTests.client.storage.uploadDataUrl.test0004,
  "stackTests > client > storage > uploadDataUrl > can upload base64 data url less than constraint": masmottTests.stackTests.client.storage.uploadDataUrl.test0005,
  "stackTests > client > storage > uploadDataUrl > returns Forbidden error if uploaded a base64 data url larger than constraint": masmottTests.stackTests.client.storage.uploadDataUrl.test0006,
  "stackTests > client > storage > uploadDataUrl > can upload plain text data url less than constraint": masmottTests.stackTests.client.storage.uploadDataUrl.test0007,
  "stackTests > client > storage > uploadDataUrl > returns Forbidden error if uploaded a plain text data url larger than constraint": masmottTests.stackTests.client.storage.uploadDataUrl.test0008,
  "stackTests > client > storage > uploadDataUrl > can upload if auth uid equals to document field which document id equals to object id": masmottTests.stackTests.client.storage.uploadDataUrl.test0009,
  "stackTests > client > storage > uploadDataUrl > returns Forbidden error if not signed in but required in rule": masmottTests.stackTests.client.storage.uploadDataUrl.test0010,
  "stackTests > client > storage > uploadDataUrl > returns Forbidden error if object document does not exists": masmottTests.stackTests.client.storage.uploadDataUrl.test0011,
  "stackTests > client > storage > uploadDataUrl > returns Forbidden error if object document field does not exists": masmottTests.stackTests.client.storage.uploadDataUrl.test0012,
  "stackTests > client > storage > uploadDataUrl > returns Forbidden error if object document field value is not auth uid": masmottTests.stackTests.client.storage.uploadDataUrl.test0013,
  "stackTests > server > db > getDoc > can upsert and get doc": masmottTests.stackTests.server.db.getDoc.test0002,
  "stackTests > server > db > getDoc > can get doc even if client.db.getDoc is forbidden by security rule": masmottTests.stackTests.server.db.getDoc.test0003,
  "stackTests > server > db > getDoc > can get doc if forbidden, even if client.db.getDoc is the doc absent": masmottTests.stackTests.server.db.getDoc.test0004,
  "stackTests > server > db > getDoc > can get doc created with client.db.usertDoc": masmottTests.stackTests.server.db.getDoc.test0005,
  "stackTests > server > db > getDoc > can get doc updated with client.db.upsertDoc": masmottTests.stackTests.server.db.getDoc.test0006,
  "stackTests > server > db > upsertDoc > can upsert doc": masmottTests.stackTests.server.db.upsertDoc.test0001,
  "stackTests > server > db > upsertDoc > can upsert doc even if client.db.upserDoc is forbidden by security rule": masmottTests.stackTests.server.db.upsertDoc.test0002,
  "stackTests > server > db > upsertDoc > can create doc even if not signed in": masmottTests.stackTests.server.db.upsertDoc.test0003,
};
